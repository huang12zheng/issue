// Code generated by Prisma (prisma@1.26.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  queryHash: (where?: QueryHashWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  queryHashes: (args?: {
    where?: QueryHashWhereInput;
    orderBy?: QueryHashOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<QueryHash>;
  queryHashesConnection: (args?: {
    where?: QueryHashWhereInput;
    orderBy?: QueryHashOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QueryHashConnectionPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createQueryHash: (data: QueryHashCreateInput) => QueryHashPromise;
  updateManyQueryHashes: (args: {
    data: QueryHashUpdateManyMutationInput;
    where?: QueryHashWhereInput;
  }) => BatchPayloadPromise;
  deleteManyQueryHashes: (where?: QueryHashWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  queryHash: (
    where?: QueryHashSubscriptionWhereInput
  ) => QueryHashSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type QueryHashOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "query_ASC"
  | "query_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "info_ASC"
  | "info_DESC"
  | "mobile_ASC"
  | "mobile_DESC"
  | "password_ASC"
  | "password_DESC"
  | "userName_ASC"
  | "userName_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface UserCreateInput {
  _id: ID_Input;
  info?: String;
  mobile?: String;
  password?: String;
  userName?: String;
}

export interface QueryHashWhereInput {
  _id?: ID_Input;
  _id_not?: ID_Input;
  _id_in?: ID_Input[] | ID_Input;
  _id_not_in?: ID_Input[] | ID_Input;
  _id_lt?: ID_Input;
  _id_lte?: ID_Input;
  _id_gt?: ID_Input;
  _id_gte?: ID_Input;
  _id_contains?: ID_Input;
  _id_not_contains?: ID_Input;
  _id_starts_with?: ID_Input;
  _id_not_starts_with?: ID_Input;
  _id_ends_with?: ID_Input;
  _id_not_ends_with?: ID_Input;
  query?: String;
  query_not?: String;
  query_in?: String[] | String;
  query_not_in?: String[] | String;
  query_lt?: String;
  query_lte?: String;
  query_gt?: String;
  query_gte?: String;
  query_contains?: String;
  query_not_contains?: String;
  query_starts_with?: String;
  query_not_starts_with?: String;
  query_ends_with?: String;
  query_not_ends_with?: String;
  AND?: QueryHashWhereInput[] | QueryHashWhereInput;
  OR?: QueryHashWhereInput[] | QueryHashWhereInput;
  NOT?: QueryHashWhereInput[] | QueryHashWhereInput;
}

export interface UserWhereInput {
  _id?: ID_Input;
  _id_not?: ID_Input;
  _id_in?: ID_Input[] | ID_Input;
  _id_not_in?: ID_Input[] | ID_Input;
  _id_lt?: ID_Input;
  _id_lte?: ID_Input;
  _id_gt?: ID_Input;
  _id_gte?: ID_Input;
  _id_contains?: ID_Input;
  _id_not_contains?: ID_Input;
  _id_starts_with?: ID_Input;
  _id_not_starts_with?: ID_Input;
  _id_ends_with?: ID_Input;
  _id_not_ends_with?: ID_Input;
  info?: String;
  info_not?: String;
  info_in?: String[] | String;
  info_not_in?: String[] | String;
  info_lt?: String;
  info_lte?: String;
  info_gt?: String;
  info_gte?: String;
  info_contains?: String;
  info_not_contains?: String;
  info_starts_with?: String;
  info_not_starts_with?: String;
  info_ends_with?: String;
  info_not_ends_with?: String;
  mobile?: String;
  mobile_not?: String;
  mobile_in?: String[] | String;
  mobile_not_in?: String[] | String;
  mobile_lt?: String;
  mobile_lte?: String;
  mobile_gt?: String;
  mobile_gte?: String;
  mobile_contains?: String;
  mobile_not_contains?: String;
  mobile_starts_with?: String;
  mobile_not_starts_with?: String;
  mobile_ends_with?: String;
  mobile_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  userName?: String;
  userName_not?: String;
  userName_in?: String[] | String;
  userName_not_in?: String[] | String;
  userName_lt?: String;
  userName_lte?: String;
  userName_gt?: String;
  userName_gte?: String;
  userName_contains?: String;
  userName_not_contains?: String;
  userName_starts_with?: String;
  userName_not_starts_with?: String;
  userName_ends_with?: String;
  userName_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface QueryHashCreateInput {
  _id: ID_Input;
  query?: String;
}

export interface QueryHashUpdateManyMutationInput {
  _id?: ID_Input;
  query?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpdateManyMutationInput {
  _id?: ID_Input;
  info?: String;
  mobile?: String;
  password?: String;
  userName?: String;
}

export interface QueryHashSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: QueryHashWhereInput;
  AND?: QueryHashSubscriptionWhereInput[] | QueryHashSubscriptionWhereInput;
  OR?: QueryHashSubscriptionWhereInput[] | QueryHashSubscriptionWhereInput;
  NOT?: QueryHashSubscriptionWhereInput[] | QueryHashSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  _id: ID_Output;
  info?: String;
  mobile?: String;
  password?: String;
  userName?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  info: () => Promise<String>;
  mobile: () => Promise<String>;
  password: () => Promise<String>;
  userName: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  info: () => Promise<AsyncIterator<String>>;
  mobile: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
}

export interface QueryHashConnection {
  pageInfo: PageInfo;
  edges: QueryHashEdge[];
}

export interface QueryHashConnectionPromise
  extends Promise<QueryHashConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QueryHashEdge>>() => T;
  aggregate: <T = AggregateQueryHashPromise>() => T;
}

export interface QueryHashConnectionSubscription
  extends Promise<AsyncIterator<QueryHashConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QueryHashEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQueryHashSubscription>() => T;
}

export interface User {
  _id: ID_Output;
  info?: String;
  mobile?: String;
  password?: String;
  userName?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  _id: () => Promise<ID_Output>;
  info: () => Promise<String>;
  mobile: () => Promise<String>;
  password: () => Promise<String>;
  userName: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  info: () => Promise<AsyncIterator<String>>;
  mobile: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
}

export interface QueryHash {
  _id: ID_Output;
  query?: String;
}

export interface QueryHashPromise extends Promise<QueryHash>, Fragmentable {
  _id: () => Promise<ID_Output>;
  query: () => Promise<String>;
}

export interface QueryHashSubscription
  extends Promise<AsyncIterator<QueryHash>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  query: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQueryHash {
  count: Int;
}

export interface AggregateQueryHashPromise
  extends Promise<AggregateQueryHash>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQueryHashSubscription
  extends Promise<AsyncIterator<AggregateQueryHash>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QueryHashPreviousValues {
  _id: ID_Output;
  query?: String;
}

export interface QueryHashPreviousValuesPromise
  extends Promise<QueryHashPreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  query: () => Promise<String>;
}

export interface QueryHashPreviousValuesSubscription
  extends Promise<AsyncIterator<QueryHashPreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  query: () => Promise<AsyncIterator<String>>;
}

export interface QueryHashSubscriptionPayload {
  mutation: MutationType;
  node: QueryHash;
  updatedFields: String[];
  previousValues: QueryHashPreviousValues;
}

export interface QueryHashSubscriptionPayloadPromise
  extends Promise<QueryHashSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QueryHashPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QueryHashPreviousValuesPromise>() => T;
}

export interface QueryHashSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QueryHashSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QueryHashSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QueryHashPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface QueryHashEdge {
  node: QueryHash;
  cursor: String;
}

export interface QueryHashEdgePromise
  extends Promise<QueryHashEdge>,
    Fragmentable {
  node: <T = QueryHashPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QueryHashEdgeSubscription
  extends Promise<AsyncIterator<QueryHashEdge>>,
    Fragmentable {
  node: <T = QueryHashSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "QueryHash",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
